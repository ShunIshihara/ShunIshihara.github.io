window.onload = function () {
    game = new Core(windowConf.x, windowConf.y);

    //z繧ｭ繝ｼ繧剃ｽｿ縺医ｋ繧医≧縺ｫ縺吶ｋ縲�
    game.keybind(90, 'z');
    game.keybind(17, 'ctrl')

    game.fps = 30;
    imagesPrefix = 'enchant.js-builds-0.8.3-b/images/';
    game.preload(imagesPrefix + 'meteo.png');
    game.preload(imagesPrefix + 'space2.png');
    game.preload(imagesPrefix + 'icon0.png');
    game.preload(imagesPrefix + 'effect0.png');
    game.preload(imagesPrefix + 'universe-bg.jpg');
    game.preload(imagesPrefix + 'title.png');
    game.preload(imagesPrefix + 'start2.png');
    game.preload(imagesPrefix + 'gameover2.png');
    game.preload(imagesPrefix + 'howtoplay.png')
    game.preload(imagesPrefix + 'font0.png');
    game.preload(imagesPrefix + 'tweetbutton.png');
	game.preload(imagesPrefix + 'rare-meteo.png');

    game.rootScene.onenter = function () {
        var backGround = new Sprite(windowConf.x, windowConf.y);
        backGround.image = game.assets[imagesPrefix + 'universe-bg.jpg'];
        game.rootScene.addChild(backGround, game.rootScene.lastChild);
        var title = new Sprite(1096, 212);
        title.image = game.assets[imagesPrefix + 'title.png'];
        title.x = -230; title.y = 20;
        title.scale(0.5, 0.5);
        game.rootScene.addChild(title);
        var startButton = new Sprite(513, 144);
        startButton.image = game.assets[imagesPrefix + 'start2.png'];
        startButton.x = 70; startButton.y = 300;
        startButton.scale(0.5, 0.5);
        game.rootScene.addChild(startButton);

        var OnStart = function () {
			console.log("start");
            game.pushScene(playingScene);
        }

		var keyStream = Rx.Observable.fromEvent(document, "keyup")
			.select(x => x.code)
			.where(x => "Space" == x)
		    .merge(Rx.Observable.fromEvent(startButton, "touchstart"))
			.take(1)
			.subscribe(x => OnStart(), err => {}, _ => console.log("completed"));

		var howtoplay = new Sprite(829, 108);
        howtoplay.image = game.assets[imagesPrefix + 'howtoplay.png'];
        howtoplay.x = -100; howtoplay.y = 400;
        howtoplay.scale(0.6, 0.6);
        game.rootScene.addChild(howtoplay);

    }

    playingScene = new Scene();
    enemys = new Group();
    bullets = new Group();
    players = new Group();
    stage = new Group();
    enemyBullets = new Group();
    effects = new Group();
    stage.addChild(enemys);
    stage.addChild(bullets);
    stage.addChild(players);
    stage.addChild(enemyBullets);
    stage.addChild(effects);
    playingScene.addChild(stage);

    gameoverScene = new Scene();

    playingScene.onenter = function (event) {
        var backGround = new Sprite(windowConf.x, windowConf.y);
        backGround.image = game.assets[imagesPrefix + 'universe-bg.jpg'];
        game.rootScene.insertBefore(backGround, game.rootScene.lastChild);

        scoreBoard = new ScoreBoard();
        scoreBoard.x = 500;
        scoreBoard.y = 20;
        rocket = new Sprite(32, 32);
        rocket.image = game.assets[imagesPrefix + 'space2.png'];

		players.addChild(rocket);

        rocket.x = 304;
        rocket.y = 500;
        rocket.shootCooltime = 0;

        rocket.addEventListener('enterframe', function (event) {
            rocket.shootCooltime -= 0 != rocket.shootCooltime ? 1 : 0;
            //console.log(rocket.shootCooltime);

            var moveDirection = {
                x: 0.0
                , y: 0.0
            };

            var speed = (game.input.ctrl) ? 3.5 : 7.0;
            if (game.input.up)
                moveDirection.y = -1.0;
            if (game.input.down)
                moveDirection.y = 1.0;
            if (game.input.right)
                moveDirection.x = 1.0;
            if (game.input.left)
                moveDirection.x = -1.0;

            //豁｣隕丞喧蜃ｦ逅�
            var magnitude = Math.sqrt(Math.pow(moveDirection.x, 2.0) + Math.pow(moveDirection.y, 2.0));
            if (magnitude > 0) {
                moveDirection.x = moveDirection.x / magnitude;
                moveDirection.y = moveDirection.y / magnitude;
            }

            var temp = { x: rocket.x, y: rocket.y };

            rocket.x += speed * moveDirection.x;
            rocket.y += speed * moveDirection.y;

            if (rocket.x <= 0 || windowConf.x <= rocket.x + rocket.width) {
                rocket.x = temp.x;
            }

            if (rocket.y <= 0 || windowConf.y <= rocket.y + rocket.height) {
                rocket.y = temp.y;
            }

            if (game.input.z && rocket.shootCooltime == 0) {
                //console.log("shoot");
                generateBullet(rocket.x + 8, rocket.y - 2);
                rocket.shootCooltime = 5;
            }
        });

        bullets.addEventListener('enterframe', function (event) {
            for (i = 0; i < bullets.childNodes.length; i++) {
                for (j = 0; j < enemys.childNodes.length; j++) {
                    var ej = enemys.childNodes[j];
                    var bi = bullets.childNodes[i];
                    if (bi != null && ej != null && ej.within(bi, ej.width / 2 - 10)) {
                        bi.OnHitEnemy(ej);
                    }
                }
            }
        });

        enemys.addEventListener('enterframe', function (event) {
            enemyAndBullets = enemys.childNodes.concat(enemyBullets.childNodes);
            for (j = 0; j < enemyAndBullets.length; j++) {
                var ej = enemyAndBullets[j];
                if (ej != null && rocket != null && ej.within(rocket, ej.width / 2)) {
                    generateHitEff(rocket.x, rocket.y).scale(2, 2);
                    rocket.parentNode.removeChild(rocket);
                    rocket = null;
                    playingScene = null;
                    game.pushScene(gameoverScene)
                    break;
                }
            }
        });

        var counter = 0;
        stage.addEventListener('enterframe', function (event) {
            if (counter++ == 10) {
                var randomx = Math.random() * 640;
                generateEnemy(randomx, -100);
                counter = 0;
            }
        });

		var rareSpawnConf = new SpawnerConfig(100, 1.0, function(){
			var randomx = Math.random() * 640;
			new RareMeteo(randomx, -100);
		});
		new Spawner(rareSpawnConf);
    };

    gameoverScene.onenter = function () {
        var gameOver = new Sprite(716, 204);
        gameOver.scale(0.5, 0.5);
        gameOver.image = game.assets[imagesPrefix + 'gameover2.png'];
        gameOver.x = -30; gameOver.y = 200;
        gameoverScene.addChild(gameOver, game.rootScene.lastChild);
        tweetButton = new Sprite(280, 99)
        tweetButton.image = game.assets[imagesPrefix + 'tweetbutton.png'];
        tweetButton.x = 180; tweetButton.y = 340;
        tweetButton.scale(0.5, 0.5);
        tweetButton.ontouchstart = function () {
            var tweetText = score + "pまで到達しました！おめでとー！";
            window.open("https://twitter.com/share?url=http:\/\/jissou.pro\/meteoshooter&related=twitterapi%2Ctwitter&hashtags=めておシューター&text=" + tweetText);
        };
        gameoverScene.addChild(tweetButton, game.rootScene.lastChild);
    }
    game.start();
}





enchant();

window.onload = function() {
    
    var game = new Game(320, 320); // 横，縦ゲーム画面の大きさ
    // core.preload('chara1.png');
    game.fps = 30;
    // fps指定
    game.onload = function() {
	//タイトル画面
	var title = new Label("タイトル，操作方法画面(rootScene)");
	title.x = 10;
	title.y = 10;
	game.rootScene.backgroundColor = "#FFFFFF";
	game.rootScene.addChild(title);

	//プレイ画面
	var playScene = new Scene();
	playScene.backgroundColor = "#FFFFFF";
	
	var playMessage = new Label("プレイ画面");
	playMessage.x = 50;
	playMessage.y = 50;
	playScene.addChild(playMessage);

	//ゲームオーバー画面
	var gameoverScene = new Scene();
	gameoverScene.backgroundColor = "#FFFFFF";

	var gameoverMessage = new Label("ゲームオーバー");
	gameoverMessage.x = 100;
	gameoverMessage.y = 100;
	gameoverScene.addChild(gameoverMessage);

	//画面をクリックしたらプレイ画面へ
	game.rootScene.addEventListener('touchstart', function(){
        game.pushScene(playScene);
	});
	
	playScene.addEventListener('touchstart', function(){
        game.replaceScene(gameoverScene);
	});
    };
    game.start();
}

くまを動かす
enchant();

window.onload = function() {
    var core = new Core(320, 320);
    core.preload('img/chara1.png');
    core.fps = 30;
    core.onload = function() {
        var bear = new Sprite(32, 32);
        bear.image = core.assets['img/chara1.png'];
        bear.x = 0;
        bear.y = 0;
        core.rootScene.addChild(bear);
	bear.on('enterframe', function() {
	    if (core.input.left) this.x -= 5;
	    if (core.input.right) this.x += 5;
	    if (core.input.up) this.y -= 5;
	    if (core.input.down) this.y += 5;
	});
	bear.on('touchstart', function() {
	    core.rootScene.removeChild(this);
	});

	core.rootScene.on('touchstart', function(e) {
	    bear.x = e.x;
	    bear.y = e.y;
	});
	
    };
    core.start();
};









enchant();

window.onload = function() {
    
    var game = new Game(320, 320); // 横，縦ゲーム画面の大きさ
    game.preload('img/gameover.png');
    game.fps = 30;
    // fps指定
    game.onload = function() {
	//タイトル画面
	var title = new Label("タイトル，操作方法画面(rootScene)");
	title.x = 10;
	title.y = 10;
	game.rootScene.backgroundColor = "#FFFFFF";
	game.rootScene.addChild(title);

	//プレイ画面
	var playScene = new Scene();
	playScene.backgroundColor = "#FFFFFF";
	
	var playMessage = new Label("プレイ画面");
	playMessage.x = 50;
	playMessage.y = 50;
	playScene.addChild(playMessage);

	//ゲームオーバー画面
	var gameoverScene = new Scene();
	gameoverScene.backgroundColor = 'black';

	var gameover = new Sprite(160, 160);
	sprite.image = game.assets['img/gameover.png'];
	gameover.x = 100;
	gameover.y = 100;
	gameoverScene.addChild(gameover);

	//画面をクリックしたらプレイ画面へ
	game.rootScene.addEventListener('touchstart', function(){
        game.pushScene(playScene);
	});
	
	playScene.addEventListener('touchstart', function(){
        game.replaceScene(gameoverScene);
	});
    };
    game.start();
}


enchant();

window.onload = function() {
    var core = new Core(320, 320);
    core.preload('img/chara1.png');
    core.fps = 30;
    core.onload = function() {
        var bear = new Sprite(32, 32);
        bear.image = core.assets['img/chara1.png'];
        bear.x = 0;
        bear.y = 0;
        core.rootScene.addChild(bear);
	bear.on('enterframe', function() {
	    if (core.input.left) this.x -= 5;
	    if (core.input.right) this.x += 5;
	    if (core.input.up) this.y -= 5;
	    if (core.input.down) this.y += 5;

	    if(this.x > 200){
	    	core.pushScene(gameOverScene);
	    	core.stop();
	    }
	});
	var label = new Label();
	label.x = 250;
	label.y = 5;
	label.color = 'blue';
	label.font = '14px "Arial"';
	label.text = '0';
	label.on('enterframe', function() {
	    label.text = (core.frame / core.fps).toFixed(1); // toFixedで小数点以下
	});
	core.rootScene.addChild(label);

	var gameOverScene = new Scene();
	gameOverScene.backgroundColor = 'black';

	
    };
    core.start();
};



enchant();

window.onload = function() {
    var core = new Core(320, 320);
    core.preload('img/chara1.png');
    core.fps = 30;
    core.onload = function() {
        var bear = new Sprite(32, 32);
        bear.image = core.assets['img/chara1.png'];
        bear.x = 0;
        bear.y = 0;
        core.rootScene.addChild(bear);
	
	bear.on('enterframe', function() {
	    if (core.input.left) this.x -= 5;
	    if (core.input.right) this.x += 5;
	    if (core.input.up) this.y -= 5;
	    if (core.input.down) this.y += 5;

	    if(this.x > 200){
	    	game.gameOver();
	    	core.stop();
	    }
	});
	var label = new Label();
	label.x = 250;
	label.y = 5;
	label.color = 'blue';
	label.font = '14px "Arial"';
	label.text = '0';
	label.on('enterframe', function() {
	    label.text = (core.frame / core.fps).toFixed(1); // toFixedで小数点以下
	});
	core.rootScene.addChild(label);
	game.gameOver = function(){
	    var gameOverScene = new Scene();
	    gameOverScene.backgroundColor = 'black';
	    core.pushScene(gameOverScene);
	}
	
    };
    core.start();
};


enchant();

window.onload = function() {
    var core = new Core(320, 320);
    core.preload('img/chara1.png');
    core.fps = 30;
    core.onload = function() {
        var bear = new Sprite(32, 32);
        bear.image = core.assets['img/chara1.png'];
        bear.x = 0;
        bear.y = 0;
        core.rootScene.addChild(bear);
	var label = new Label();
	label.x = 250;
	label.y = 5;
	label.color = 'blue';
	label.font = '14px "Arial"';
	label.text = '0';
	label.on('enterframe', function() {
	    label.text = (core.frame / core.fps).toFixed(1); // toFixedで小数点以下
	});
	core.rootScene.addChild(label);

	core.gameOver = function(){
	    var gameOverScene = new Scene();
	    gameOverScene.backgroundColor = 'black';
	    core.pushScene(gameOverScene);
	}

	bear.on('enterframe', function() {
	    if (core.input.left) this.x -= 5;
	    if (core.input.right) this.x += 5;
	    if (core.input.up) this.y -= 5;
	    if (core.input.down) this.y += 5;

	    if(this.x > 200){
	    	core.gameOver();
	    	core.stop();
	    }
	});
	
    };
    core.start();
};


クラス
//クラス
var Bear = Class.create(Sprite, {
initialize: function(x, y) {
Sprite.call(this, 32, 32);
this.x = x;
this.y = y;
this.image = core.assets['img/chara1.png'];
this.on('enterframe', function() {
this.x += 5;
if(this.x > 280)this.x = 280;
});
core.rootScene.addChild(this);
}
});
var bear = new Bear(0, 0);
var bear = new Bear(0, 100);

ランダム関数
	function rand(n) {
	    return Math.floor(Math.random() * (n + 1));
	}



enchant();

window.onload = function() {
    var core = new Core(320, 320);
    core.preload('img/chara1.png');
    core.fps = 30;
    core.onload = function() {
	core.rootScene = function(){
	    //タイトル画面
	    var title = new Label("タイトル，操作方法画面(rootScene)");
	    title.x = 10;
	    title.y = 10;
	    core.rootScene.backgroundColor = 'blue';
	    core.rootScene.addChild(title);
	    core.rootScene.addEventListener('touchstart', function() {
		core.pushScene(playScene);
            });
	}
	
	playScene = new Scene();
	playScene.onenter = function(event){
        var bear = new Sprite(32, 32);
        bear.image = core.assets['img/chara1.png'];
        bear.x = 160;
        bear.y = 250;
        core.rootScene.addChild(bear);
	
	bear.on('enterframe', function() {
	    if (core.input.left) this.x -= 10;
	    if (core.input.right) this.x += 10;
	    if (core.input.up) this.y -= 10;
	    if (core.input.down) this.y += 10;

	    if(this.y > 280) this.y = 280;

	    if(this.x > 200){
	    	gameOver();
	    	core.stop();
	    }
	});
	var label = new Label();
	label.x = 280;
	label.y = 5;
	label.color = 'blue';
	label.font = '14px "Arial"';
	label.text = '0';
	label.on('enterframe', function() {
	    label.text = (core.frame / core.fps).toFixed(1); // toFixedで小数点以下
	});
	    core.rootScene.addChild(label);
	}

	

	//関数
 	var gameOver = function(){
	    var gameOverScene = new Scene();
	    gameOverScene.backgroundColor = 'black';
	    core.pushScene(gameOverScene);
	}	
    };
    core.start();
};


    var Stage = Class.create(Sprite, {
	initialize: function(x, y){
            Sprite.call(this, 16, 16);
            this.x = x;
            this.y = 0;
            this.frame = 2;
            this.opacity = 1;
            this.image = game.assets['img/map1.png'];
            this.on('enterframe', function() {
                this.rotate(1);
	    });
	    scene.addChild(this);
	}
    });

	    var stages = [];
	    for(var i = 0; i < 40; i++){
		stages[i] = new Stage(16 * i, 0);
	    }


	    //時間表示
	    var label = new Label();
	    label.x = 600;
	    label.y = 5;
	    label.color = 'blue';
	    label.font = '14px "Arial"';
	    label.text = '0';
	    label.on('enterframe', function() {
	    	label.text = (game.frame / game.fps).toFixed(1); // toFixedで小数点以下
	    });
	    scene.addChild(label);


Label.textAlign = 'center';
















enchant();


var time = new Label();

var windowSize = {x:640, y:640}

window.onload = function() {
    var game = new Game(windowSize.x, windowSize.y); // 表示領域の大きさを設定(横，縦)
    game.fps = 30;                 // ゲームの進行スピードを設定
    game.preload('img/chara.png', 'img/map1.png', 'img/gameover.png', 'img/clear.png', 'img/planet.png');
    game.onload = function() {     // ゲームの準備が整ったらメインの処理を実行します
        /**
         * タイトルシーンを作り、返す関数
         */
        var createTitleScene = function() {
            var scene = new Scene();                // 新しいシーンを作る
	    var stage = new Sprite(windowSize.x, windowSize.y);
	    stage.image = game.assets['img/planet.png'];
	    // stage.frame = 26;
            scene.addChild(stage);	    
            var labelTitle = new Label('タイトル！');   // 新しいラベル(文字)を作る
	    labelTitle.textAlign = 'center';
	    // labelTitle.x = 280;
	    // labelTitle.y = 50;
	    labelTitle.font = "24px cursive";	    
	    labelTitle.color = 'black'
            scene.addChild(labelTitle);                  // シーンにラベルに追加
	    var labelrule = new Label('操作方法：矢印で移動！zで弾を撃つ！');
	    labelrule.x = 180;
	    labelrule.y = 280;
	    labelrule.font = "18px cursive";
	    labelrule.color = 'black'
            scene.addChild(labelrule);                  // シーンにラベルに追加
	    var labelrule = new Label('敵をなるべく早くすべて倒せ！');
	    labelrule.x = 180;
	    labelrule.y = 400;
	    labelrule.font = "18px cursive";
	    labelrule.color = 'black'
            scene.addChild(labelrule);                  // シーンにラベルに追加
	    
	    // var stage = new Sprite(windowSize.x, windowSize.y);
	    // stage.image = game.assets['img/planet.png'];
	    // // stage.frame = 26;
            // scene.addChild(stage);

            scene.backgroundColor = 'white';      // シーンの背景色を設定
            scene.addEventListener('touchstart', function(e) { // シーンにタッチイベントを設定
                //現在表示しているシーンをゲームシーンに置き換えます
                game.pushScene(createGameScene());
            });
            // この関数内で作ったシーンを呼び出し元に返します(return)
            return scene;
        };

	
    	/**
         * ゲームシーンを作り、返す関数
         */
        var createGameScene = function() {
	    game.frame = 0;	     // 時間の初期化のため
            var scene = new Scene();                // 新しいシーンを作る
            // scene.backgroundColor = 'rgba(255, 200, 0, 1)';
	    // シーンの背景色を設定
	    var stage = new Sprite(windowSize.x, windowSize.y);
	    stage.image = game.assets['img/planet.png'];
	    // stage.frame = 26;
            scene.addChild(stage);	    

	    //キャラ
            var chara = new Sprite(32, 32);
            chara.image = game.assets['img/chara.png'];
            chara.x = 310;
            chara.y = 600;
	    chara.frame = 18;
            scene.addChild(chara);
	    //キャラ操作
	    chara.on('enterframe', function() {
	    	if (game.input.left){
		    this.x -= 5;
		    this.frame = 6;
		}
	    	if (game.input.right){
		    this.x += 5;
		    this.frame = 12;
		}		    
	    	if (game.input.up){
		    this.y -= 5;
		    this.frame = 18;
		}
		if (game.input.down){
		    this.y += 5;
		    this.frame = 0;
		}
	    	if(this.y > 605) this.y = 605;
		if(this.y < 5) this.y = 5;
	    	if(this.x > 605) this.x = 605;
		if(this.x < 5) this.x = 5;		

	    	if(this.x > 600 && this.y > 600){
                game.pushScene(createGameoverScene());
	    	}
	    });


	    //敵クラス
	    var Enemy = Class.create(Sprite, {
		initialize:function(x, y){
		    var move = 0, con = 0;
		    Sprite.call(this, 32, 32);
		    this.x = x;
		    this.y = y;
		    this.image = game.assets['img/chara.png'];
		    this.frame = 3;
		    this.on('enterframe', function(){
			con++;
			if(con == 20){
			    move = rand(3);
			    if(move == 0){ // 左
				this.x -= 10;
				this.frame = 9;
			    }
			    if(move == 1){ // 右
				this.x += 10;
				this.frame = 15;
			    }
			    if(move == 2){ // 上
  				this.y -= 10;
				this.frame = 21;
			    }
			    if(move == 3){ // 下
				this.y += 10;
				this.frame = 3;
			    }
			    if(this.y > 605) this.y = 605; // 画面外へ行かないため
			    if(this.y < 5) this.y = 5;
	    		    if(this.x > 605) this.x = 605;
			    if(this.x < 5) this.x = 5;
			    con = 0;
			}
		    });
		    scene.addChild(this);
		}
	    });
	    enemies = [];
	    for (var i = 0; i < 3; i++){
	    	enemies[i] = new Enemy(150 * (i + 1), 100);
	    }



	    //ランダム関数　0~nまで この関数は外部からの引用
	    function rand(n) {
		return Math.floor(Math.random() * (n + 1));
	    }
	    
	    //時間表示
	    time.x = 600;
	    time.y = 5;
	    time.color = 'blue';
	    time.font = '14px "Arial"';
	    time.text = '0';
	    time.on('enterframe', function() {
	    	time.text = (game.frame / game.fps).toFixed(1); // toFixedで小数点以下
	    });
	    scene.addChild(time);

	    
	    
            scene.addEventListener('touchstart', function(e) { // シーンにタッチイベントを設定
                //現在表示しているシーンの上にゲームオーバーシーンを重ねて表示します
                game.pushScene(createGameclearScene());
            });
            // この関数内で作ったシーンを呼び出し元に返します(return)
            return scene;
        };

	
        /**
         * ゲームオーバーシーンを作り、返す関数
         */
        var createGameoverScene = function() {
            var scene = new Scene();                // 新しいシーンを作る
            scene.backgroundColor = 'rgba(0, 0, 0, 0.2)';      // シーンの背景色を設定
            var label = new Label('クリックでタイトルに戻るよ！');      // 新しいラベル(文字)を作る
            label.x = 240;                            // 横位置調整
	    label.y = 400;                           // 縦位置調整
	    label.color = 'blue';
            scene.addChild(label);                  // シーンにラベルに追加
	    var sprite = new Sprite(188, 96);			 // ゲームオーバーの画像
	    sprite.image = game.assets['img/gameover.png'];
	    sprite.x = 220;
	    sprite.y = 240;
	    scene.addChild(sprite);
            scene.addEventListener('touchstart', function(e) { // シーンにタッチイベントを設定
                //現在表示しているシーンを外し、直前のシーンを表示します
                game.popScene();
                game.popScene();		
            });
            // この関数内で作ったシーンを呼び出し元に返します(return)
            return scene;
        };


        /**
         * ゲームクリアシーンを作り、返す関数
         */
        var createGameclearScene = function() {
            var scene = new Scene();                // 新しいシーンを作る
            scene.backgroundColor = 'rgba(255, 255, 255, 0.2)';      // シーンの背景色を設定
            var label = new Label('クリックでタイトルに戻るよ！');      // 新しいラベル(文字)を作る
            label.x = 240;                            // 横位置調整
	    label.y = 400;                           // 縦位置調整
	    label.color = 'blue';
            scene.addChild(label);                  // シーンにラベルに追加
	    var sprite = new Sprite(268, 48);			 // ゲームクリアの画像
	    sprite.image = game.assets['img/clear.png'];
	    sprite.x = 190;
	    sprite.y = 240;
	    scene.addChild(sprite);
	    var labelTime = new Label(); // クリアタイムの表示
	    labelTime.text = time.text;
	    labelTime.x = 290;
	    labelTime.y = 350;
	    scene.addChild(labelTime);
	    var labelSecond = new Label('秒！');
	    labelSecond.x = 340;
	    labelSecond.y = 350;
	    scene.addChild(labelSecond);

	    
            scene.addEventListener('touchstart', function(e) { // シーンにタッチイベントを設定
                //現在表示しているシーンを外し、直前のシーンを表示します
                game.popScene();
                game.popScene();		
            });
            // この関数内で作ったシーンを呼び出し元に返します(return)
            return scene;
        };

	
        // ゲームの_rootSceneをタイトルシーンに置き換えます
        game.replaceScene(createTitleScene());
        // このようにcreateTitleScene() と書くと、シーンが関数内で作成されて
        // createTitleScene()と書かれた場所に代入されます


    }
    game.start(); // ゲームをスタートさせます
};


	    // map = new Map(16, 16);
	    // map.image = game.assets['img/map0.png'];
	    // var mapObstacles = [
            // [ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 4 ],
            // [ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4 ]
	    // ];
	    // map.loadData(mapObstacles);	    

	    // var colMap = [
            // [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
            // [ 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
	    // ];
	    // map.collisionData = colMap;

	    // scene.addChild(map);
	    // if (map.hitTest(100,100) === true) {
	    // 	alert('hit!');
	    // }
